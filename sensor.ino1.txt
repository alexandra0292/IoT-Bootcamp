https:#include <Keypad.h>



typedef struct sensor_t {
  float (*get) (void);
  char paramName[20];
  char unitName[10];
} sensorType;

enum { SENSOR_TEMP,SENSOR_LIGHT, SENSOR_PIR, SENSOR_ULTRASONIC, SENSOR_NR_OF };
//=================================
//Keypad init
//=================================

const byte ROWS = 4; 
const byte COLS = 4; 

char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {13, 12, 11, 10}; 
byte colPins[COLS] = {9, 8, 7, 6}; 

Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 

//========================================
//Led-uri
//=======================================

#define LED_PIN_1 4
void SetupLED1(){
pinMode(LED_PIN_1, OUTPUT);
}

#define LED_PIN_2 2
void SetupLED2(){
pinMode(LED_PIN_2, OUTPUT);
}



//==================================
// TMP36 temperature virtual device driver
//==================================
// Sensor pin map
#define TEMPERATURE_TMP36_PIN A1
// ADC range
#define ADC_MIN 0
#define ADC_MAX 1023
// Voltage range
#define VOLT_MIN 0
#define VOLT_MAX 5
// Temperature range
#define TEMP_MIN -40
#define TEMP_MAX 125
  
  
void SetupTMP36() {
  pinMode(TEMPERATURE_TMP36_PIN, INPUT);
}
  
  
float GetTemperatureTMP36(void) {
  int rawData = analogRead(TEMPERATURE_TMP36_PIN);
  float celsius = map(((rawData - 20) * 3.04), ADC_MIN, ADC_MAX, TEMP_MIN, TEMP_MAX);
  
  //return temperature;
  return celsius;
}
  
//==================================//


//==================================
// Light LDR virtual device driver
//==================================
#define LDR_PIN A0
#define LIGHT_MIN 10
#define LIGHT_MAX 100
#define ADC_MIN 0
#define ADC_MAX 1023
#define VOLT_MIN 0
#define VOLT_MAX 5
  

void LightSensorSetup() {
  pinMode(LDR_PIN, INPUT);
}

float GetLight() {
  int rawData = analogRead(LDR_PIN);
  float voltage = map(rawData, ADC_MIN, ADC_MAX, VOLT_MIN, VOLT_MAX);
  float light = map(voltage, VOLT_MIN, VOLT_MAX, LIGHT_MIN, LIGHT_MAX);
  
  return light;
}

//==================================//

//==================================
// PIR virtual device driver
//==================================

#define PIR_PIN 3

void SetupPIR() {
  pinMode(PIR_PIN, INPUT);
}

float ReadPIR() {
  // read the state of the sensor/digital input
  int sensorState = digitalRead(PIR_PIN);
  return sensorState;
}
//==================================//


//==================================
// Ultrasonic virtual device driver
//==================================

// defines pins numbers
#define TRIG_PIN 5
#define ECHO_PIN 4

// defines variables
long duration;
int distance;

void UltrasonicSetup() {
  pinMode(TRIG_PIN, OUTPUT); // Sets the TRIG_PIN as an Output
  pinMode(ECHO_PIN, INPUT); // Sets the ECHO_PIN as an Input
}

float GetDistance() {
  // Clears the TRIG_PIN
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  // Sets the TRIG_PIN on HIGH state for 10 micro seconds
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
  duration = pulseIn(ECHO_PIN, HIGH);
  // Calculating the distance
  distance= duration*0.034/2;
  return distance;
}

//==================================//

sensorType sensorList[SENSOR_NR_OF] = {
  {
    GetTemperatureTMP36,
    "Temperature", 
    "celsius"
  },
  {
    GetLight,
    "Light intensity",
    "points"    
  },
  {
    ReadPIR,
    "Motion",
    "yes/no",
  },
  {
    GetDistance,
    "Distance",
    "cm"
  }
 };

float SensorGetValue(int id) {
    if(id < SENSOR_NR_OF) {
      return sensorList[id].get();
    }
}

char * SensorGetUnit(int id) {
    if(id < SENSOR_NR_OF) {
      return sensorList[id].unitName;
    }
}

char * SensorGetParamName(int id) {
    if(id < SENSOR_NR_OF) {
      return sensorList[id].paramName;
    }
}


void setup() {
  Serial.begin(9600);
  SetupTMP36();
  LightSensorSetup();
  SetupPIR();
  UltrasonicSetup();
  SetupLED1();
  SetupLED2();
}

void loop() {
//  float value = SensorGetValue(SENSOR_TEMP);  
//  Serial.print(value);
//  
//  char * unit = SensorGetUnit(SENSOR_TEMP);
//  Serial.print(" ");
//  Serial.print(unit);
  int i = 0;
  char customKey = customKeypad.getKey();

  //Serial.print(customKey);
  
    if(customKey == '1'){
	//  SENSOR_TEMP,SENSOR_LIGHT, SENSOR_PIR, SENSOR_ULTRASONIC, SENSOR_NR_OF };

      i = SENSOR_TEMP;
      char * paramName = SensorGetParamName(i);
      Serial.print(paramName);
      Serial.print(": ");

      float value = SensorGetValue(i);  
      Serial.print(value);

      char * unit = SensorGetUnit(i);
      Serial.print(" "); 
      Serial.print(unit); 
      Serial.print(" , ");

      Serial.print( String(value) + " " + String(unit) + ", ");
      digitalWrite(LED_PIN_2, HIGH);
      delay(3000);
      digitalWrite(LED_PIN_2, LOW);
	  delay(3000);
  	  Serial.println();
    }
  
  
  
 /** for(int i=0; i<SENSOR_NR_OF; i++) {
    char * paramName = SensorGetParamName(i);
    Serial.print(paramName);
    Serial.print(": ");
    
    float value = SensorGetValue(i);  
    Serial.print(value);

    char * unit = SensorGetUnit(i);
    Serial.print(" "); 
    Serial.print(unit); 
    Serial.print(" , ");
    
    Serial.print( String(value) + " " + String(unit) + ", ");
  }**/
}